package com.smylay.hr.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;

// This is an entity class automatically generated by java that allows the system to access and interact with my database table Absence.

@Entity
@Table(name = "absence")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Absence.findAll", query = "SELECT a FROM Absence a")
    , @NamedQuery(name = "Absence.findByAbsenceid", query = "SELECT a FROM Absence a WHERE a.absenceid = :absenceid")
    , @NamedQuery(name = "Absence.findByStartdate", query = "SELECT a FROM Absence a WHERE a.startdate = :startdate")
    , @NamedQuery(name = "Absence.findByEnddate", query = "SELECT a FROM Absence a WHERE a.enddate = :enddate")
    , @NamedQuery(name = "Absence.findByReasonother", query = "SELECT a FROM Absence a WHERE a.reasonother = :reasonother")
    , @NamedQuery(name = "Absence.findByNumdays", query = "SELECT a FROM Absence a WHERE a.numdays = :numdays")
    , @NamedQuery(name = "Absence.findByApproved", query = "SELECT a FROM Absence a WHERE a.approved = :approved")})
public class Absence implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "absenceid")
    private Integer absenceid;
    @Basic(optional = false)
    @NotNull
    @Column(name = "startdate")
    @Temporal(TemporalType.TIMESTAMP)
    private Date startdate;
    @Basic(optional = false)
    @NotNull
    @Column(name = "enddate")
    @Temporal(TemporalType.TIMESTAMP)
    private Date enddate;
    @Size(max = 280)
    @Column(name = "reasonother")
    private String reasonother;
    @Basic(optional = false)
    @NotNull
    @Column(name = "numdays")
    private float numdays;
    @Basic(optional = false)
    @NotNull
    @Column(name = "approved")
    private boolean approved;
    @JoinColumn(name = "employeeid", referencedColumnName = "employeeid")
    @ManyToOne(optional = false)
    private Employee employeeid;
    @JoinColumn(name = "reasonid", referencedColumnName = "reasonid")
    @ManyToOne(optional = false)
    private Reason reasonid;

    public Absence() {
    }

    public Absence(Integer absenceid) {
        this.absenceid = absenceid;
    }

    public Absence(Integer absenceid, Date startdate, Date enddate, float numdays, boolean approved) {
        this.absenceid = absenceid;
        this.startdate = startdate;
        this.enddate = enddate;
        this.numdays = numdays;
        this.approved = approved;
    }

    public Integer getAbsenceid() {
        return absenceid;
    }

    public void setAbsenceid(Integer absenceid) {
        this.absenceid = absenceid;
    }

    public Date getStartdate() {
        return startdate;
    }

    public void setStartdate(Date startdate) {
        this.startdate = startdate;
    }

    public Date getEnddate() {
        return enddate;
    }

    public void setEnddate(Date enddate) {
        this.enddate = enddate;
    }

    public String getReasonother() {
        return reasonother;
    }

    public void setReasonother(String reasonother) {
        this.reasonother = reasonother;
    }

    public float getNumdays() {
        return numdays;
    }

    public void setNumdays(float numdays) {
        this.numdays = numdays;
    }

    public boolean getApproved() {
        return approved;
    }

    public void setApproved(boolean approved) {
        this.approved = approved;
    }

    public Employee getEmployeeid() {
        return employeeid;
    }

    public void setEmployeeid(Employee employeeid) {
        this.employeeid = employeeid;
    }

    public Reason getReasonid() {
        return reasonid;
    }

    public void setReasonid(Reason reasonid) {
        this.reasonid = reasonid;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (absenceid != null ? absenceid.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Absence)) {
            return false;
        }
        Absence other = (Absence) object;
        if ((this.absenceid == null && other.absenceid != null) || (this.absenceid != null && !this.absenceid.equals(other.absenceid))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "com.smylay.hr.model.Absence[ absenceid=" + absenceid + " ]";
    }
    
}
